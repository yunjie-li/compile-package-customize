name: Build Custom IPKs from ImmortalWrt

on:
  push:
    branches:
      - main  # 或者你希望触发构建的分支
    paths:
      - 'package-list.txt'  # 当包列表文件变更时触发
  workflow_dispatch:  # 允许手动触发工作流
    inputs:
      packages:
        description: '要构建的包列表（用空格分隔）'
        required: false
        default: ''

jobs:
  build-ipks:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 以获得更好的兼容性
    steps:
      # 步骤 1: 检出当前仓库
      - name: Checkout repository
        uses: actions/checkout@v3

      # 步骤 2: 安装依赖项 (针对 OpenWrt 24.10 更新)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            python3-distutils python3-setuptools python3-dev rsync unzip \
            zlib1g-dev file wget ccache fastjar java-propose-classpath \
            libelf-dev libfuse-dev libpopt-dev libudev-dev patch \
            pkgconf python3 python3-pip python3-ply python3-docutils \
            default-jre-headless uglifyjs zip
          
          # 显示系统信息
          uname -a
          gcc --version
          python3 --version

      # 步骤 3: 克隆 ImmortalWrt 源码 (使用 OpenWrt 24.10 分支)
      - name: Clone ImmortalWrt source code
        run: |
          git clone https://github.com/immortalwrt/immortalwrt.git
          cd immortalwrt
          
          # 切换到 OpenWrt 24.10 分支
          git checkout openwrt-24.10

      # 步骤 4: 添加 kenzok8 的 small-package 软件源
      - name: Add kenzok8 small-package feed
        working-directory: ./immortalwrt
        run: |
          # 添加 small-package 软件源到 feeds.conf.default
          sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
          
          # 显示修改后的 feeds.conf.default 内容
          echo "==== feeds.conf.default 内容 ===="
          cat feeds.conf.default

      # 步骤 5: 更新和安装 feeds
      - name: Update and install feeds
        working-directory: ./immortalwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 步骤 6: 准备构建配置 (针对 OpenWrt 24.10 更新)
      - name: Prepare build configuration
        working-directory: ./immortalwrt
        run: |
          # 创建最小化的 .config 文件
          cat > .config <<EOF
          CONFIG_MODULES=y
          CONFIG_HAVE_DOT_CONFIG=y
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          # 使用 glibc 代替 musl
          CONFIG_LIBC_USE_GLIBC=y
          # 基础包
          CONFIG_PACKAGE_luci=y
          # 添加其他必要的基础配置
          CONFIG_DEVEL=y
          CONFIG_CCACHE=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_GCC_USE_VERSION_13=y
          EOF
          
          # 使用 defconfig 补全配置
          make defconfig
          
          # 显示配置信息
          echo "==== 配置信息 ===="
          grep -E "CONFIG_LIBC|CONFIG_TARGET|CONFIG_GCC" .config

      # 步骤 7: 预先构建工具链和基础包
      - name: Build toolchain and base packages
        working-directory: ./immortalwrt
        run: |
          # 首先构建工具链和基础包
          make tools/install -j$(nproc) || make tools/install V=s
          make toolchain/install -j$(nproc) || make toolchain/install V=s
          make target/compile -j$(nproc) || make target/compile V=s
          
          # 检查工具链是否正确构建
          echo "==== 工具链信息 ===="
          ls -la staging_dir/
          find staging_dir -name "ld-*.so*" || echo "No ld-*.so found"

      # 步骤 8: 读取要构建的包列表
      - name: Determine packages to build
        id: get-packages
        run: |
          if [ -n "${{ github.event.inputs.packages }}" ]; then
            # 使用手动输入的包列表
            echo "PACKAGES=${{ github.event.inputs.packages }}" >> $GITHUB_ENV
          elif [ -f "package-list.txt" ]; then
            # 从文件读取包列表
            PKGS=$(cat package-list.txt | grep -v '^#' | tr '\n' ' ')
            echo "PACKAGES=${PKGS}" >> $GITHUB_ENV
          else
            echo "No packages specified. Please provide a package-list.txt file or use workflow_dispatch input."
            exit 1
          fi

      # 步骤 9: 构建指定的 IPK 包 (已改进)
      - name: Build specified IPK packages
        working-directory: ./immortalwrt
        run: |
          # 创建构建脚本
          cat > build-packages.sh <<'EOF'
          #!/bin/bash
          set -e
          
          # 读取环境变量中的包列表
          PACKAGE_LIST="${PACKAGES}"
          
          echo "Building packages: ${PACKAGE_LIST}"
          
          # 首先构建所有包的依赖
          echo "========== Building package dependencies =========="
          for PKG in ${PACKAGE_LIST}; do
            echo "Preparing dependencies for: ${PKG}"
            make package/${PKG}/prepare V=s || echo "Prepare step failed for ${PKG}, continuing anyway"
          done
          
          # 然后构建每个包
          for PKG in ${PACKAGE_LIST}; do
            echo "========== Building package: ${PKG} =========="
            
            # 检查是否包含路径分隔符
            if [[ "$PKG" == */* ]]; then
              # 包含路径，直接使用
              PKG_PATH="$PKG"
              PKG_NAME=$(basename "$PKG")
              echo "Using specified path: $PKG_PATH"
            else
              # 不包含路径，尝试查找
              PKG_NAME="$PKG"
              
              # 尝试在不同位置查找包
              if [ -d "package/$PKG" ]; then
                PKG_PATH="package/$PKG"
              elif [ -d "package/feeds/smpackage/$PKG" ]; then
                PKG_PATH="package/feeds/smpackage/$PKG"
              else
                # 使用find命令查找包路径
                PKG_PATH=$(find package feeds -name "$PKG" -type d | head -n 1)
                if [ -z "$PKG_PATH" ]; then
                  echo "Error: Package $PKG not found in any location"
                  exit 1
                fi
              fi
              echo "Found package at: $PKG_PATH"
            fi
            
            # 构建包
            echo "Building: make $PKG_PATH/compile V=s"
            if make "$PKG_PATH/compile" V=s; then
              echo "Successfully built $PKG_NAME"
            else
              echo "Failed to build $PKG_NAME, trying with package name only"
              if make "package/$PKG_NAME/compile" V=s; then
                echo "Successfully built $PKG_NAME using package name only"
              else
                echo "Failed to build $PKG_NAME"
                exit 1
              fi
            fi
          done
          EOF
          
          chmod +x build-packages.sh
          ./build-packages.sh

      # 步骤 10: 收集构建的 IPK 包
      - name: Collect IPK packages
        working-directory: ./immortalwrt
        run: |
          mkdir -p ipk-packages
          find bin/packages/ -name "*.ipk" -exec cp {} ipk-packages/ \;
          find bin/targets/ -name "*.ipk" -exec cp {} ipk-packages/ \;
          
          # 创建包列表文件
          ls -la ipk-packages/ > ipk-packages/package-list.txt
          
          # 打包所有 IPK 文件
          cd ipk-packages
          tar -czvf ../ipk-packages.tar.gz *

      # 步骤 11: 创建 Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ipk-build-${{ github.run_number }}
          release_name: IPK Build ${{ github.run_number }}
          draft: false
          prerelease: false
          body: |
            自动构建的 IPK 包
            构建时间: ${{ github.event.repository.updated_at }}
            构建的包: ${{ env.PACKAGES }}

      # 步骤 12: 上传 IPK 包到 Release
      - name: Upload IPK packages to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./immortalwrt/ipk-packages.tar.gz
          asset_name: ipk-packages.tar.gz
          asset_content_type: application/gzip

      # 步骤 13: 单独上传每个 IPK 文件到 Release
      - name: Upload individual IPK files to Release
        run: |
          cd ./immortalwrt/ipk-packages/
          for ipk in *.ipk; do
            if [ -f "$ipk" ]; then
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$ipk" \
                "${{ steps.create_release.outputs.upload_url }}?name=$ipk"
            fi
          done
